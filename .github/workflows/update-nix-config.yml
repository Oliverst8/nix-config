name: Update Nix Config

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight

jobs:
  update-flake:
    runs-on: ubuntu-latest
    outputs:
      configurations: ${{ steps.get-configs.outputs.configurations }}
    
    steps:
      - name: Checkout feat/update branch
        uses: actions/checkout@v4
        with:
          ref: feat/update

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run nix flake update
        run: nix flake update

      - name: Get configuration list
        id: get-configs
        run: |
          configs=$(nix flake show --json | jq -c '.nixosConfigurations | keys')
          echo "configurations=$configs" >> $GITHUB_OUTPUT

      - name: Commit and push flake.lock changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add flake.lock
          git diff --staged --quiet || git commit -m "Update flake.lock"
          git push origin feat/update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-configurations:
    runs-on: ubuntu-latest
    needs: update-flake
    if: needs.update-flake.outputs.configurations != '[]'
    strategy:
      matrix:
        config: ${{ fromJson(needs.update-flake.outputs.configurations) }}
      fail-fast: false  # Continue building other configs even if one fails
    outputs:
      build-result-${{ strategy.job-index }}: ${{ steps.build.outputs.result }}
      config-name-${{ strategy.job-index }}: ${{ matrix.config }}
    
    steps:
      - name: Checkout feat/update branch
        uses: actions/checkout@v4
        with:
          ref: feat/update

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build configuration ${{ matrix.config }}
        id: build
        run: |
          echo "Building configuration: ${{ matrix.config }}"
          if nix build .#nixosConfigurations.${{ matrix.config }}.config.system.build.toplevel; then
            echo "result=‚úÖ SUCCESS" >> $GITHUB_OUTPUT
            echo "‚úÖ Successfully built ${{ matrix.config }}"
          else
            echo "result=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "‚ùå Failed to build ${{ matrix.config }}"
            exit 1
          fi

  summary:
    runs-on: ubuntu-latest
    needs: [update-flake, build-configurations]
    if: always() && needs.update-flake.result == 'success'
    
    steps:
      - name: Print build summary
        run: |
          echo "# üèóÔ∏è Nix Configuration Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Get all configuration names and their results
          configs='${{ needs.update-flake.outputs.configurations }}'
          echo "$configs" | jq -r '.[]' | while IFS= read -r config; do
            # Find the corresponding result (this is a simplified approach)
            # In practice, we'll use the job outputs more directly
            echo "| $config | Processing... |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Overall Results" >> $GITHUB_STEP_SUMMARY
          
          # Count successes and failures from the build-configurations job
          if [ "${{ needs.build-configurations.result }}" == "success" ]; then
            echo "üéâ All configurations built successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-configurations.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è Some configurations failed to build. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùì Build status unclear. Check job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Flake Lock Updated:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "üåü **Workflow completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          # Also print to console for immediate visibility
          echo ""
          echo "=========================================="
          echo "üèóÔ∏è  NIX CONFIGURATION BUILD SUMMARY"
          echo "=========================================="
          echo ""
          
          configs='${{ needs.update-flake.outputs.configurations }}'
          echo "üìã Configurations processed:"
          echo "$configs" | jq -r '.[] | "  ‚Ä¢ " + .'
          
          echo ""
          if [ "${{ needs.build-configurations.result }}" == "success" ]; then
            echo "üéâ Result: ALL BUILDS SUCCESSFUL!"
          elif [ "${{ needs.build-configurations.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è  Result: SOME BUILDS FAILED"
          else
            echo "‚ùì Result: STATUS UNCLEAR"
          fi
          
          echo ""
          echo "üìù Flake lock updated and pushed to feat/update branch"
          echo "üïê Completed at: $(date -u)"
          echo "=========================================="
